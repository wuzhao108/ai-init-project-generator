# {{ config.name }}

{{ config.description }}

## 项目信息

- **项目名称**: {{ config.name }}
- **版本**: {{ config.version }}
- **Java版本**: {{ config.java_version }}
- **Spring Boot版本**: {{ config.spring_boot_version }}
- **包名**: {{ config.package }}

## 技术栈

{% set tech_stack = config.tech_stack %}
- **数据库**: {{ tech_stack.database | upper }}
- **ORM框架**: {{ tech_stack.orm | upper }}
{% if tech_stack.cache %}
- **缓存**: {{ tech_stack.cache | join(', ') | upper }}
{% endif %}
{% if tech_stack.mq %}
- **消息队列**: {{ tech_stack.mq | join(', ') | upper }}
{% endif %}
{% if tech_stack.nosql %}
- **NoSQL**: {{ tech_stack.nosql | join(', ') | upper }}
{% endif %}
{% if tech_stack.doc %}
- **文档工具**: {{ tech_stack.doc | join(', ') | upper }}
{% endif %}
{% if tech_stack.security %}
- **安全框架**: {{ tech_stack.security | join(', ') | upper }}
{% endif %}
{% if tech_stack.monitoring %}
- **监控组件**: {{ tech_stack.monitoring | join(', ') | upper }}
{% endif %}
{% if tech_stack.actuator %}
- **Spring Boot Actuator**: 已启用
{% endif %}

## 快速开始

### 环境要求

- JDK {{ config.java_version }}+
- Maven 3.6+
{% if tech_stack.database == 'mysql' %}
- MySQL 8.0+
{% elif tech_stack.database == 'postgresql' %}
- PostgreSQL 12+
{% endif %}

### 运行步骤

1. **克隆项目**
   ```bash
   git clone <repository-url>
   cd {{ config.name }}
   ```

2. **配置数据库**
   {% if tech_stack.database == 'mysql' %}
   - 创建数据库: `CREATE DATABASE {{ config.name.replace('-', '_') }};`
   - 修改 `src/main/resources/application.yml` 中的数据库连接信息
   {% elif tech_stack.database == 'postgresql' %}
   - 创建数据库: `CREATE DATABASE {{ config.name.replace('-', '_') }};`
   - 修改 `src/main/resources/application.yml` 中的数据库连接信息
   {% elif tech_stack.database == 'h2' %}
   - 使用内存数据库，无需额外配置
   {% endif %}

3. **编译项目**
   ```bash
   mvn clean compile
   ```

4. **运行应用**
   ```bash
   mvn spring-boot:run
   ```

5. **访问应用**
   - 应用地址: http://localhost:8080
   - API测试: http://localhost:8080/api/hello
   {% if tech_stack.actuator %}
   - 健康检查: http://localhost:8080/actuator/health
   {% endif %}
   {% if 'swagger' in tech_stack.doc %}
   - API文档: http://localhost:8080/swagger-ui.html
   {% endif %}

## 项目结构

```
{{ config.name }}/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── {{ config.package.replace('.', '/') }}/
│   │   │       ├── Application.java
│   │   │       ├── controller/
│   │   │       ├── entity/
│   │   │       {% if tech_stack.orm == 'jpa' %}
│   │   │       └── repository/
│   │   │       {% elif tech_stack.orm == 'mybatis' %}
│   │   │       └── mapper/
│   │   │       {% endif %}
│   │   └── resources/
│   │       ├── application.yml
│   │       ├── logback-spring.xml
│   │       {% if tech_stack.orm == 'mybatis' %}
│   │       └── mapper/
│   │       {% endif %}
│   └── test/
│       └── java/
├── pom.xml
└── README.md
```

## API接口

### Hello Controller

- `GET /api/hello` - 返回问候信息
- `GET /api/health` - 健康检查

{% if config.generate_sample_code %}
### User相关接口

{% if tech_stack.orm == 'jpa' %}
- 使用Spring Data JPA进行数据访问
{% elif tech_stack.orm == 'mybatis' %}
- 使用MyBatis进行数据访问
{% endif %}
- 实体类: `User`
{% if tech_stack.orm == 'jpa' %}
- Repository: `UserRepository`
{% elif tech_stack.orm == 'mybatis' %}
- Mapper: `UserMapper`
{% endif %}
{% endif %}

## 开发指南

### 代码规范

- 遵循Java编码规范
- 使用驼峰命名法
- 添加适当的注释和文档

### 测试

```bash
# 运行所有测试
mvn test

# 运行特定测试类
mvn test -Dtest=ApplicationTest
```

### 打包部署

```bash
# 打包应用
mvn clean package

# 运行打包后的jar
java -jar target/{{ config.name }}-{{ config.version }}.jar
```

{% if config.generate_docker %}
### Docker部署

```bash
# 构建镜像
docker build -t {{ config.name }}:{{ config.version }} .

# 运行容器
docker run -p 8080:8080 {{ config.name }}:{{ config.version }}

# 使用docker-compose
docker-compose up -d
```
{% endif %}

## 许可证

本项目采用 MIT 许可证 - 查看 [LICENSE](LICENSE) 文件了解详情。

## 贡献

欢迎提交 Issue 和 Pull Request！

## 联系方式

如有问题，请联系项目维护者。